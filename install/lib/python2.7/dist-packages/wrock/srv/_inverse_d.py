"""autogenerated by genpy from wrock/inverse_dRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import wrock.msg

class inverse_dRequest(genpy.Message):
  _md5sum = "2591a1fbcbc91cd492ee7a3c804b499e"
  _type = "wrock/inverse_dRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """wrock/cube_pose pose

================================================================================
MSG: wrock/cube_pose
float32 x
float32 y
float32 z
float32 pitch
float32 yaw
float32 xrot
float32 yrot
float32 zrot


"""
  __slots__ = ['pose']
  _slot_types = ['wrock/cube_pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(inverse_dRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pose is None:
        self.pose = wrock.msg.cube_pose()
    else:
      self.pose = wrock.msg.cube_pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.pose.x, _x.pose.y, _x.pose.z, _x.pose.pitch, _x.pose.yaw, _x.pose.xrot, _x.pose.yrot, _x.pose.zrot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose is None:
        self.pose = wrock.msg.cube_pose()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.pose.x, _x.pose.y, _x.pose.z, _x.pose.pitch, _x.pose.yaw, _x.pose.xrot, _x.pose.yrot, _x.pose.zrot,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.pose.x, _x.pose.y, _x.pose.z, _x.pose.pitch, _x.pose.yaw, _x.pose.xrot, _x.pose.yrot, _x.pose.zrot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose is None:
        self.pose = wrock.msg.cube_pose()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.pose.x, _x.pose.y, _x.pose.z, _x.pose.pitch, _x.pose.yaw, _x.pose.xrot, _x.pose.yrot, _x.pose.zrot,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8f = struct.Struct("<8f")
"""autogenerated by genpy from wrock/inverse_dResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import wrock.msg

class inverse_dResponse(genpy.Message):
  _md5sum = "fc985306997834316e0da0df221fa1e6"
  _type = "wrock/inverse_dResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """wrock/joint_pose joints


================================================================================
MSG: wrock/joint_pose
float32 j1
float32 j2
float32 j3
float32 j4
float32 j5


"""
  __slots__ = ['joints']
  _slot_types = ['wrock/joint_pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(inverse_dResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joints is None:
        self.joints = wrock.msg.joint_pose()
    else:
      self.joints = wrock.msg.joint_pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5f.pack(_x.joints.j1, _x.joints.j2, _x.joints.j3, _x.joints.j4, _x.joints.j5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.joints is None:
        self.joints = wrock.msg.joint_pose()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.joints.j1, _x.joints.j2, _x.joints.j3, _x.joints.j4, _x.joints.j5,) = _struct_5f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5f.pack(_x.joints.j1, _x.joints.j2, _x.joints.j3, _x.joints.j4, _x.joints.j5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.joints is None:
        self.joints = wrock.msg.joint_pose()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.joints.j1, _x.joints.j2, _x.joints.j3, _x.joints.j4, _x.joints.j5,) = _struct_5f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5f = struct.Struct("<5f")
class inverse_d(object):
  _type          = 'wrock/inverse_d'
  _md5sum = '6873795dc2f218e6b937d13b0214e87f'
  _request_class  = inverse_dRequest
  _response_class = inverse_dResponse
